Transforming the assembler into mathematical expressions:

w = D1
x = 0
x += z
x = x % 26 // 0
x += 11 // 11
x = (x == w) ? 1 : 0 
x = (x == 0) ? 1 : 0 // "invert" // 1
y = 0
y += 25
y *= x
y += 1 // 26
z *= y // 0
y = 0
y += w // D1
y += 7 // D1 + 7
y *= x 
z += y // D1 + 7

>> w = D1
>> x = 1
>> y = D1 + 7
>> z = D1 + 7


w = D2
x = 0
x += z // D1 + 7
x = x % 26 // D1 + 7
x += 14 // D1 + 21
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 1
y = 0
y += 25
y *= x
y += 1
z *= y // (D1 + 7) * 26
y = 0
y += w
y += 8 // D2 + 8
y *= x
z += y // (D1 + 7) * 26 + (D2 + 8)

>> w = D2
>> x = 1
>> y = D2 + 8
>> z = (D1 + 7) * 26 + (D2 + 8)


w = D3
x = 0
x += z // (D1 + 7) * 26 + (D2 + 8)
x = x % 26 // D2 + 8
x += 10 // D2 + 18
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 1
y = 0
y += 25
y *= x
y += 1
z *= y // ((D1 + 7) * 26 + (D2 + 8)) * 26
y = 0
y += w 
y += 16 // D3 + 16
y *= x
z += y // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)

>> w = D3
>> x = 1
>> y = D3 + 16
>> z = ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)


w = D4
x = 0
x += z // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)
x = x % 26 // D3 + 16
x += 14 // D3 + 30
x = (x == w) ? 1 : 0 
x = (x == 0) ? 1 : 0 // "invert" // 1
y = 0
y += 25
y *= x
y += 1
z *= y // (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26
y = 0
y += w
y += 8 // D4 + 8
y *= x
z += y // (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26 + (D4 + 8)

>> w = D4
>> x = 1
>> y = D4 + 8
>> z = (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26 + (D4 + 8) = [Z4]


w = D5
x = 0
x += z // (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26 + (D4 + 8)
x = x % 26 // D4 + 8
z = z / 26 // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)
x = x - 8 // D4
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 0, Require: D4 == D5
y = 0
y += 25
y *= x
y += 1 // 1
z *= y // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)
y = 0
y += w 
y += 3 // D5 + 3
y *= x // 0
z += y // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)

>> w = D5
>> x = 0
>> y = 0
>> z = ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)


w = D6
x = 0
x += z // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)
x = x % 26 // D3 + 16
x += 14 // D3 + 30
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 1
y = 0
y += 25
y *= x
y += 1 // 26
z *= y // (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26
y = 0
y += w
y += 12 // D6 + 12
y *= x
z += y // (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26 + (D6 + 12)

>> w = D6
>> x = 1
>> y = D6 + 12
>> z = (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26 + (D6 + 12)


w = D7
x = 0
x += z // (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26 + (D6 + 12)
x = x % 26 // D6 + 12
z = z / 26 // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)
x = x - 11 // D6 + 1
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 0, Require: D6 + 1 == D7
y = 0
y += 25
y *= x
y += 1 // 1
z *= y // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)
y = 0
y += w
y += 1
y *= x // 0
z += y // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)

>> w = D7
>> x = 0
>> y = 0
>> z = ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)


w = D8
x = 0
x += z // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)
x = x % 26 // D3 + 16
x += 10 // D3 + 26
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 1
y = 0
y += 25
y *= x
y += 1 // 26
z *= y // (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26
y = 0
y += w
y += 8 // D8 + 8
y *= x
z += y // (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26 + (D8 + 8)

>> w = D8
>> x = 1
>> y = D8 + 8
>> z = (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26 + (D8 + 8)


w = D9
x = 0
x += z // (((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)) * 26 + (D8 + 8)
x = x % 26 // D8 + 8
z = z / 26 // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)
x = x - 6 // D8 + 2
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 0, Require: D8 + 2 == D9
y = 0
y += 25
y *= x
y += 1
z *= y // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)
y = 0
y += w
y += 8
y *= x // 0
z += y // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)

>> w = D9
>> x = 0
>> y = 0
>> z = ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)


w = D10
x = 0
x += z // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D3 + 16)
x = x % 26 // D3 + 16
z = z / 26 // (D1 + 7) * 26 + (D2 + 8)
x = x - 9 // D3 + 7
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 0, Require: D3 + 7 == D10
y = 0
y += 25
y *= x
y += 1
z *= y // (D1 + 7) * 26 + (D2 + 8)
y = 0
y += w
y += 14
y *= x // 0
z += y // (D1 + 7) * 26 + (D2 + 8)

>> w = D10
>> x = 0
>> y = 0
>> z = (D1 + 7) * 26 + (D2 + 8)


w = D11
x = 0
x += z // (D1 + 7) * 26 + (D2 + 8)
x = x % 26 // D2 + 8
x += 12 // D2 + 20
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 1
y = 0
y += 25
y *= x
y += 1
z *= y // ((D1 + 7) * 26 + (D2 + 8)) * 26
y = 0
y += w
y += 4 // D11 + 4
y *= x
z += y // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D11 + 4)

>> w = D11
>> x = 1
>> y = D11 + 4
>> z = ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D11 + 4)


w = D12
x = 0
x += z // ((D1 + 7) * 26 + (D2 + 8)) * 26 + (D11 + 4)
x = x % 26 // D11 + 4
z = z / 26 // (D1 + 7) * 26 + (D2 + 8)
x = x - 5 // D11 - 1
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 0, Require: D11 - 1 == D12
y = 0
y += 25
y *= x
y += 1 // 1
z *= y // (D1 + 7) * 26 + (D2 + 8)
y = 0
y += w
y += 14
y *= x // 0
z += y // (D1 + 7) * 26 + (D2 + 8)

>> w = D12
>> x = 0
>> y = 0
>> z = (D1 + 7) * 26 + (D2 + 8)


w = D13
x = 0
x += z // (D1 + 7) * 26 + (D2 + 8)
x = x % 26 // D2 + 8
z = z / 26 // D1 + 7
x = x - 4 // D2 + 4
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 0, Require: D2 + 4 == D13
y = 0
y += 25
y *= x
y += 1 // 1
z *= y // D1 + 7
y = 0
y += w
y += 15
y *= x // 0
z += y // D1 + 7

>> w = D13
>> x = 0
>> y = 0
>> z = D1 + 7


w = D14
x = 0
x += z // D1 + 7
x = x % 26 // D1 + 7
z = z / 26 // 0
x = x - 9 // D1 - 2
x = (x == w) ? 1 : 0
x = (x == 0) ? 1 : 0 // "invert" // 0, Require: D1 - 2 == D14
y = 0
y += 25
y *= x
y += 1 // 1
z *= y // 0
y = 0
y += w
y += 6 // D14 + 6
y *= x // 0
z += y // 0

>> w = D14
>> x = 0
>> y = 0
>> z = 0


Require: D4 == D5
Require: D6 + 1 == D7
Require: D8 + 2 == D9
Require: D3 + 7 == D10
Require: D11 - 1 == D12
Require: D2 + 4 == D13
Require: D1 - 2 == D14

==>

#  12345678901234
A: 95299897999897

#  12345678901234
B: 31111121382151

Yeah!
